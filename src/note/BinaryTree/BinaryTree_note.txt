Binary Tree In Order Traversal 94
     Morris Traversal   O(n) algorithm complexity and O(l) space

Binary Tree Level Order Traversal 102
     BFS and DFS
    .......                        107
    常用 与List有关的方法
       res.add(0,tmp);    List<List<Integer>> res = new ArrayList<List<Integer>>();
       Collections.reverse(counts);

Binary Tree Postorder Traversal 145
       stack
Binary Tree Paths 257
Given a binary tree, return all root-to-leaf paths.
   postOrder using stack
   stack stores its parent nodes to the root

Count Complete Tree Nodes 222

      // in a complete tree, the index or height 0 of the first level (root) is 0. So the value of (1<<height) is equal to the total number of nodes of this level.
      递归计算完全二叉树的最后一层节点数,  midNode 为root.left.right.right...
       TreeNode node = root.left;
              TreeNode midNode = node.right;
              int curHeight = 2;
              while (curHeight < height) {
                  curHeight++;
                  midNode = midNode.right;
              }
              if (midNode == null) {
                  return countLastLevel(root.left, height - 1);
              }
              return (1 << height - 1) + countLastLevel(root.right, height - 1);

Invert Binary Tree 226
递归 invert
   public void invert(TreeNode root){
           if(root!=null){
               invert(root.left); //递归 invert
               invert(root.right); // 递归 invert
               if(root.left==null && root.right==null) return;
               TreeNode temp = root.left;
               root.left = root.right;
               root.right = temp;
           }
       }

Binary Tree Maximum Path Sum 124

递归计算
   1.定义递归出口, 一般为叶子节点或null节点
   if (root == null) return Integer.MIN_VALUE;
           if(root.left == null && root.right ==null){
               // it is a leaf, every time find a leave,update max;
               if(root.val > maxSum) maxSum = root.val;
               return root.val;
           }
   2. 递归
           int value = root.val; // this value become a new leaf
           int left = helper(root.left);
           int right = helper(root.right);

Sum Root to Leaf Numbers 129

  preOrder

  public void getPaths(TreeNode root, String str, List<Integer> res) {
          if (root == null) return;
          if (str.equals("")) {
              str += root.val;
          } else {
              str += root.val;
          }
          if (root.left == null && root.right == null) {
              res.add(Integer.valueOf(str));
              return;
          }
          if (root.left != null) {
              getPaths(root.left, str, res);
          }
          if (root.right != null) {
              getPaths(root.right, str, res);
          }
      }
